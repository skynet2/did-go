// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package web is a generated GoMock package.
package web

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockroundTripper is a mock of roundTripper interface.
type MockroundTripper struct {
	ctrl     *gomock.Controller
	recorder *MockroundTripperMockRecorder
}

// MockroundTripperMockRecorder is the mock recorder for MockroundTripper.
type MockroundTripperMockRecorder struct {
	mock *MockroundTripper
}

// NewMockroundTripper creates a new mock instance.
func NewMockroundTripper(ctrl *gomock.Controller) *MockroundTripper {
	mock := &MockroundTripper{ctrl: ctrl}
	mock.recorder = &MockroundTripperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockroundTripper) EXPECT() *MockroundTripperMockRecorder {
	return m.recorder
}

// RoundTrip mocks base method.
func (m *MockroundTripper) RoundTrip(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *MockroundTripperMockRecorder) RoundTrip(arg0 interface{}) *roundTripperRoundTripCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*MockroundTripper)(nil).RoundTrip), arg0)
	return &roundTripperRoundTripCall{Call: call}
}

// roundTripperRoundTripCall wrap *gomock.Call
type roundTripperRoundTripCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *roundTripperRoundTripCall) Return(arg0 *http.Response, arg1 error) *roundTripperRoundTripCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *roundTripperRoundTripCall) Do(f func(*http.Request) (*http.Response, error)) *roundTripperRoundTripCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *roundTripperRoundTripCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *roundTripperRoundTripCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
